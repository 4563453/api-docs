<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API-Docs</title><link>https://glimesh.github.io/api-docs/docs/api/</link><description>Recent content on API-Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://glimesh.github.io/api-docs/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://glimesh.github.io/api-docs/docs/api/api-explorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/api-explorer/</guid><description>API Explorer # Insomnia is a GraphQL explorer. It allows you to make queries without needing a dev environment. It is the recommended way to learn the API and is helpful if you are new to programming.
We have a JSON file with a collection to handle auth and make common requests in Insomnia. You can download it here
Getting Started # First we need to download Insomnia.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/migration/</guid><description>API Migration # Glimesh has migrated to a new API and a new Authentication system. This migration changes the endpoint URL, adds pagination, and modifies some fields. The Auth change adds PKCE auth and changes the structure of the credentials.
If you are new to the API you can safely skip this doc.
Using the New API # Using the new API is very easy. Simply point all requests to the new URL.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/pagination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/pagination/</guid><description>API Pagination # Some fields in the API are paginated. We have to sort through the pages to get the data we requested. Glimesh follows the GraphQL pagination spec.
GraphQL pagination can be found here
Connection, Edges, and Nodes # Pagination is used when the data requested is too large to send to the user. Take the below query as an example. This query would return the ID of all the users on the site.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/voyager/</guid><description>Voyager is an interactive GraphQL API explorer. It allows you to view all the data in our API. Click and drag to move around the explorer. Click on a field to view its properties. Scoll to adjust zoom.
Loading... // Render GraphQLVoyager.init(document.getElementById('voyager'), { hideDocs: true, hideSettings: false, displayOptions: { sortByAlphabet: true, }, introspection: { "data": { "__schema": { "directives": [ { "args": [ { "defaultValue": null, "description": "Included when true.</description></item></channel></rss>