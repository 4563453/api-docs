'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/api-docs/docs/api/query-api/basic-query/','title':"Basic Query",'section':"Query Api",'content':"Glimesh API Requests\r#\r\rThis is a basic tutorial for communicating with the Glimesh API. This guide assumes you have a client ID or an access token from a user. Having basic GraphQL knowledge would also be helpful.\n New to GraphQL? This tutorial explains the basics. https://graphql.org/learn/schema/\n Authentication\r#\r\rAll requests made to Glimesh must contain the proper authentication. The authentication value should be included as a header of the request. This value will change depending on the authentication type. For access tokens use:\nAuthorization: 'Bearer YOUR_TOKEN' .\nReplace \u0026ldquo;YOUR_TOKEN\u0026rdquo; with your access token. If you are using a client ID to authenticate you must use this instead:\nAuthorization: 'Client-ID YOUR_CLIENT_ID'\nReplace \u0026ldquo;YOUR_CLIENT_ID\u0026rdquo; with your ID. This will allows you access to the API.\n A client ID can use the API in read only mode. An access token is limited by its scopes.\n Building Our Request\r#\r\rThe Glimesh API uses GraphQL. You must structure your query accordingly. The API has documentation here. It will allow you to view all of the possible queries. Some data requires an access token with a special scope. For this example we will structure a basic request that requires no special scope. The query must be included in the body of the request.\nquery { user (username: \u0026#34;USERNAME\u0026#34;){ username, id} } Make sure to change \u0026ldquo;USERNAME\u0026rdquo; to a user on Glimesh. We are requesting the username and ID of the user. Now that we have our authentication and our query we can request the data. Send a POST request with our query and header from above to:\nhttps://glimesh.tv/api\nGlimesh will send a JSON formatted response when it receives our request.\n{ \u0026#34;data\u0026#34;: { \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;154\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;Mytho\u0026#34; } } } You can parse the response to get the data you want. You could test every query like this but there is an easier way.\nGlimesh.tv/api\r#\r\rGlimesh has a website that we can visit to make queries. This is a basic GUI that lets us view the API and has intellisense built in. It is very useful for testing queries.\n You must be logged in to Glimesh for this site to work. You make queries as the authenticated user.\n Visit the website here. You can make any query that you want.\nIn this example we request a list of categories on Glimesh. We specify that we want the name of each. Glimesh will return the data on the right.\nFrom this website you can read the API spec and query for any data that you want. If you have any questions feel free to talk to us in Discord.\nCommon Errors\r#\r\rThere are a few errors you may encounter while querying the API.\nError: 401 Unauthorized. You must be logged in to access the API.\nThis is an authentication issue. Check your authentication header. You need to use the right type of authentication and make sure that the information is valid.\n  Internal Server Error  This is usually user error rather than a server error. Ensure the auth info is correct and check your query for errors. If you think your query is correct try it here.\n  syntax error before: \\\u0026quot;\\\\\\\u0026quot;QUERY\\\\\\\u0026quot;\\\u0026quot;\u0026quot;  Your query is in the incorrect format. It must match the GraphQL specifications. You can only request properties that exist and you must have the proper permissions to access them. Check the API docs for more information.\n Stuck with something? Talk to us in Discord. We would be happy to help you!\n "});index.add({'id':1,'href':'/api-docs/docs/api/query-api/nodejs/node-query/','title':"Node Query",'section':"Query Api",'content':"Glimesh API Requests With NodeJS\r#\r\rThis is a basic tutorial for communicating with the Glimesh API using NodeJS. This guide assumes you know basic JS and have an access token from a user. You can use a client ID if you do not yet have a token. Having basic GraphQL knowledge would also be helpful.\n Need a refresh? This tutorial explains the basics of graphql. https://graphql.org/learn/schema/\n Creating the Project\r#\r\rWe need to create a basic project. In your terminal type\nnpm init -y .\nThis will create a project.JSON file. This project uses the Request npm package. It helps with sending requests to the server and handling the response. In your terminal type\nnpm install request.\nThat is the only package that you will need!\nStarting Up\r#\r\rIn your project create a blank JS file. I will title mine \u0026ldquo;glimesh.js\u0026rdquo;. Start by importing the Request library. Paste this at the top of your file.\nvar request = require('request');\rNow we need to build our query. The Glimesh API docs can be found here. It is a work in progress. In this example we will ask Glimesh for the name and ID of our user. If you are using an access token you can get this data in the myself object. query{\rmyself {\rusername,\rid\r}\r} However, we need to convert this so JS can understand it. To do this we create a data variable. Paste this under the import statement above.\nvar data = ` query { myself { username, id} } ` If you are going to use a client ID you have to specify which user to get data for. This is because a client ID does not have a user identity. This query will return the same data as the myself object.\nvar data = ` query { user (username: \u0026#34;USERNAME\u0026#34;){ username, id} } ` Feel free to replace USERNAME with your own username! Since we are not accessing any private information we do not need any special permissions/scopes.\n Leave the quotations around \u0026quot;USERNAME\u0026quot;. Glimesh processes our query as graphQL. Even though data is a string Glimesh will convert it to graphQL when it receives our request. GraphQL requires that the user we search for be a string. Since we used `` to encase the contents of data, quotations must be used to keep your username a string.\n Define Options\r#\r\rNext we set up the call to the API. We need to add our data variable from above and our authentication as a header. We do this with the options variable. If you do not already have an authentication method (Client ID or Access Token) you need to get one now. Paste this below your query.\nvar options = { method: \u0026#39;POST\u0026#39;, body: data, url: \u0026#39;https://glimesh.tv/api\u0026#39;, headers: { \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer Your_Token\u0026#39; } }; Notice we are sending the data variable from before. If you are using an access token replace \u0026ldquo;Your_Token\u0026rdquo; with your access token in the Authorization string. It should look like this. 'Authorization': 'Bearer qertyuiop123456789'\nIf you are using a client ID replace \u0026ldquo;Bearer\u0026rdquo; with \u0026ldquo;Client-ID\u0026rdquo; and \u0026ldquo;Your_Token\u0026rdquo; with your client ID. It should look like this.\n'Authorization': 'Client-ID qwertyuiop123456789'\nSend Request\r#\r\rNow we set up the request. We ask Glimesh for data and we setup a callback function to handle it when it arrives. The server will normally respond in less than one second. Paste this below the options variable.\nfunction callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { //if all works as it should...  console.log(body); //The unfiltered response  var convertedResponse = JSON.parse(body); //Convert the response so we can use it  console.log(`The user is ${convertedResponse.data.myself.username}and the ID is ${convertedResponse.data.myself.id}`); } else { console.log(error) //log any errors.  console.log(body) //sometimes the body contains the error.  } } If you searched for a user instead of myself you need to change the convertedResponse output to:\nconsole.log(`The user ${convertedResponse.data.user.username}has an ID of ${convertedResponse.data.user.id}`); Finally we send the request. At the bottom of the file add this line.\nrequest(options, callback); When you are ready, save the file and type the line below in your terminal to query the API!\nnode filename.js\nMake sure to replace \u0026ldquo;filename\u0026rdquo; with the name of your file! For example -\nnode glimesh.js\nCommon Errors\r#\r\r You must be logged in to access the API.   Cause: The auth string is incorrect. Make sure the token is valid. They expire after a short period and a new token is needed. You should also check the auth string. It should look like this 'Authorization': 'Bearer qertyuiop123456789' or 'Authorization': 'Client-ID qertyuiop123456789' depending on the auth method you used.\n  Internal Server Error   Cause: This is usually user error rather than a server error. Ensure the auth info is correct and check your query. The query is a string but the contents of that variable are graphQL. If you think your query is correct try it here. Don\u0026rsquo;t forget to remove the `` when testing on the API site. Note that you must be signed in to use the API website!\n  syntax error before: \\\u0026quot;\\\\\\\u0026quot;query\\\\\\\u0026quot;\\\u0026quot;\u0026quot;   Cause: Your query is in the incorrect format. Ensure it matches the example in the code above. You can only request properties that exist and you must have the proper permissions to access them. Check the API docs for more information.\n Conclusion\r#\r\rThis is the basis for most API requests. If you have any questions let us know in the #dev channel in our Discord.\nThe full file can be found here.\nvar request = require(\u0026#39;request\u0026#39;); //Import the library //Define the data we want from Glimesh. var data = ` query { myself { username, id} } ` // If you used a client ID the myself object will not exist. Try this: /* var data = ` query { user (username: \u0026#34;USERNAME\u0026#34;){ username, id} }` */ //Make sure to replace USERNAME with a user!  //Tell the request library where to send the request and how to add auth var options = { method: \u0026#39;POST\u0026#39;, body: data, url: \u0026#39;https://glimesh.tv/api\u0026#39;, headers: { \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer Token_Here\u0026#39; //If you are using a client ID use \u0026#39;Authorization\u0026#39;: \u0026#39;Client-ID qwertyuiop123456789\u0026#39;  } }; //Callback function runs when the data is recieved. We convert it to an object on arrival. function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); //The unfiltered response  var convertedResponse = JSON.parse(body); //Convert the response  console.log(`You are ${convertedResponse.data.myself.username}and your ID is ${convertedResponse.data.myself.id}`); // If you are using a client ID you will have requested the user object. Use the line below instead!  // console.log(`The user ${convertedResponse.data.user.username} has an ID of ${convertedResponse.data.user.id}`);  } else { console.log(error); //log any errors  console.log(body); } } //send the request request(options, callback); "});index.add({'id':2,'href':'/api-docs/docs/authencation/accesstoken/accesstoken/','title':"Access Token",'section':"Access Token",'content':"Access Tokens\r#\r\rAn access token can be used to query the Glimesh API on behalf of a user. You can also get info about the user that the token belongs to.\nRequesting A Token\r#\r\rBefore requesting a token you must have a developer application. You will need your client ID, secret ID, and redirect URL. First you need to have a user authenticate with your app. The user must be directed to https://glimesh.tv/oauth/authorize?response_type=code\u0026amp;state=\u0026amp;client_id=CLIENT_ID\u0026amp;scope=public%20email%20chat%20streamkey\u0026amp;redirect_uri=REDIRECT_URL\nMake sure to replace your client ID and your redirect URL. The redirect URL must match one of the URL\u0026rsquo;s on your application. Scopes are space separated values that determine what permissions you want from the user. Only request the scopes that you need.\nThe current scopes are:\n public: Get public information about the user and other users on Glimesh. email: View the email of the user. chat: View and speak in a chatroom. Note that speaking through the api is not yet supported. streamkey: View the streamkey of the user.  When the user is sent to the link they will have to accept your app scopes. They will then be sent to your apps redirect URL. Glimesh will send a code inside the URL when they are sent back to your app. You need to extract it from the URL.\nhttp://your-app.com/some/area?code=qwertyuiop123\nOnce you have the code you need to make a request to Glimesh. We will exchange the code for an access token.\nPOST https://glimesh.tv/api/oauth/token?grant_type=authorization_code\u0026amp;code=CODE\u0026amp;redirect_uri=REDIRECT_URL\u0026amp;client_id=CLIENTID\u0026amp;client_secret=SECRETID\nSend a POST request with the URL above replacing the code,redirect url, client ID, and secret ID. Remember to keep the secret ID hidden from your users. When Glimesh receives the POST request it will send back the information we want. Once it is parsed it will look like this:\n{ access_token: \u0026#39;qwertyuiopo1234567890\u0026#39;, created_at: \u0026#39;2020-12-14T15:15:29\u0026#39;, expires_in: 21600, refresh_token: \u0026#39;qwertyuiop0987654321\u0026#39;, scope: \u0026#39;public email chat streamkey\u0026#39;, token_type: \u0026#39;bearer\u0026#39; } Now you can query the Glimesh API on behalf of a user. This token will expire after a few hours so you need to refresh it or ask the user for a new one. If you have any questions talk to us in the #dev channel in our Discord.\n Ready to refresh your token? Continue with OAuth here\n Common Errors\r#\r\rThere are a few errors you may encounter while requesting a token.\n{ error: \u0026#39;invalid_grant\u0026#39;, error_description: \u0026#39;The provided authorization grant is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.\u0026#39; } This means something is wrong with your URL. You can only use each code once. You must send the request with the grant_type=authorization_code for Glimesh to send you the access token. Ensure all of the data in the URL matches the data in your dev application. Glimesh will refuse any request that is not properly formatted.\n{ error: \u0026#39;invalid_request\u0026#39;, error_description: \u0026#39;The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed.\u0026#39; } This is a request error. Some part of your URL is not necessary or missing. Ensure the parameters in the URL are spelled correctly. You should also check that you have all of the required data in the URL.\nError: 401 Unauthorized. You must be logged in to access the API.\nThis is an authentication issue. This is commonly seen when querying the API but I added it here because it most likely means you must request another token. You must renew or request a new token and send the API request to Glimesh properly. Tokens expire after a few hours unless they are renewed.\n Stuck with something? Talk to us in Discord. We would be happy to help you!\n "});index.add({'id':3,'href':'/api-docs/docs/authencation/accesstoken/nodejs/node-access-token/','title':"Node Access Token",'section':"Access Token",'content':"Getting User Tokens With NodeJS\r#\r\rThis is a basic tutorial for getting an auth token from a user using Oauth with NodeJS. This guide assumes you know basic JS and understand the workings of Oauth 2.\n Need a refresh? This tutorial explains the basics of Oauth 2 https://darutk.medium.com/the-simplest-guide-to-oauth-2-0-8c71bd9a15bb\n Creating the Project\r#\r\rWe need to create a basic project. In your terminal type:\nnpm init -y\nThis will create a project.JSON file. This project uses the Express and Request packages. Install them with:\nnpm install express request\nThese packages will help us set up a basic web server and send requests to Glimesh.\nStarting Up\r#\r\rIn your project create a blank JS file. I will title mine auth.js. Start by importing Express. Paste this at the top of your file.\nconst express = require(\u0026#39;express\u0026#39;); //Express package const app = express(); // Creates endpoints for the server. const request = require(\u0026#39;request\u0026#39;); //Request package var clientID = \u0026#34;\u0026#34;; // ID for connecting your users to your app. var secretID = \u0026#34;\u0026#34;; //ID to verify your app, keep private.  This imports the modules our server will need. The server will use the app variable for creating endpoints. The IDs are used so Glimesh can identify our app. We will insert the IDs later.\nCreating the server\r#\r\rFirst we need to tell the server to listen for connections. We also need to tell the server which port to be on. I would recommend 8080 or 3000. Paste this in your file:\nconst port = process.env.PORT || 3000; //Opens the server on port 3000 app.listen(port, () =\u0026gt; console.log(\u0026#39;App listening on port \u0026#39; + port)); //keeps the server running^  This will keep the server from closing by itself. Now we can create endpoints for our users to connect to. One will redirect to the Glimesh auth page (/oauth/authorize) and the other will handle the auth info sent from Glimesh. You can create a web page for the first endpoint if you wish. For the sake of this tutorial I will keep it a simple redirect. Paste this in your file:\n//When a user visits http://localhost:3000/auth app.get(\u0026#39;/auth\u0026#39;, (req, res) =\u0026gt; { //redirects the user to the glimesh authenication page res.redirect(301, \u0026#39;https://glimesh.tv/oauth/authorize?response_type=code\u0026amp;state=\u0026amp;client_id=\u0026#39; + clientID + \u0026#39;\u0026amp;scope=public%20email%20chat%20streamkey\u0026amp;redirect_uri=http://localhost:3000/success\u0026#39;); }); In this URL we send the client ID, the redirect URL, and a set of scopes that we want access to. We also request a code in the response_type. Next we will create a developer application. This will give us a client ID and a secret ID.\n If you have a web page that you want your users to access when they go to this endpoint you can send it to them by using res.sendFile(\u0026quot;FILE_NAME.html\u0026quot;) You would need to have a button or other method to send them to the authentication page.\n Developer Applications\r#\r\rBefore we can request Oauth permissions we need a developer application. This is what Glimesh will use to authenticate users for your app. It is also how Glimesh can monitor and identify requests you and your users send. Click here to create your developer application.\nSet up your dev application like this. Use a unique name and description. You can update these at any time. Ensure that the homepage of your app is http://localhost:3000 and your redirect link is http://localhost:3000/success. You must replace the port number if you used a different port.\nSave your app when you are finished.\nGetting the Token\r#\r\rNow that we have a developer app we can update our variables. Set it equal to your client ID and secret ID. It is very important to keep the secret ID hidden from your users. If your ID is leaked you can reset them from the Glimesh dev app page but your users must authenticate again.\nvar clientID = \u0026#34;CLIENT_ID_HERE\u0026#34; var secretID = \u0026#34;SECRET_HERE\u0026#34; We need to create an endpoint for Glimesh to redirect to. In the previous section we told Glimesh to redirect to locahhost:3000/success. Let\u0026rsquo;s create it!\napp.get(\u0026#34;/success\u0026#34;, (req, res) =\u0026gt; { let code = req.query.code; console.log(\u0026#34;The code is \u0026#34; + code); res.send(`\u0026lt;h1\u0026gt;code recieved!\u0026lt;/h1\u0026gt;`) //Sends a confirmation message to the user }); When our user is redirected to our server the token is sent in the URL as ?code=CODE_HERE. We pull the code from URL and log it to the console.\nOnce you have the code you can request the token from Glimesh. This can be done with a simple Request function. When we get a response we parse it and log it to the console. Update the code for the /success endpoint as follows:\napp.get(\u0026#34;/success\u0026#34;, (req, res) =\u0026gt; { let code = req.query.code; console.log(\u0026#34;The code is \u0026#34; + code); res.send(`\u0026lt;h1\u0026gt;Code recieved, requesting token!\u0026lt;/h1\u0026gt;`) //Sends a confirm message to the user  //Now we send this code to Glimesh to ask for a token.  var options = { method: \u0026#39;POST\u0026#39;, body: \u0026#34;\u0026#34;, url: \u0026#34;https://glimesh.tv/api/oauth/token?grant_type=authorization_code\u0026amp;code=\u0026#34; + code + \u0026#34;\u0026amp;redirect_uri=http://localhost:3000/success\u0026amp;client_id=\u0026#34; + clientID + \u0026#34;\u0026amp;client_secret=\u0026#34; + secretID }; request(options, (error, response, body) =\u0026gt; { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { //If all is as it should be  console.log(body); //The unfiltered response  var data = JSON.parse(body); console.log(data) } else { console.log(error) //log any errors  console.log(response.statusCode) console.log(body) } }); }); Save the file when you are finished. Let\u0026rsquo;s test our code! In your terminal type:\nnode FILE_NAME.js\nReplace FILE_NAME with the name of your file. This will start up the web server. Some antivirus programs may block the process because other devices on your network can access this server. Simply allow the port number you used in your antivirus software if this is the case. You may want to restart the server.\nOnce that is complete and the server is running head to http://localhost:3000/auth replacing the port number with the correct port. It will redirect you to your client application page. Accept it and it will redirect you back to your server at the /success endpoint.\n Please note that you must be logged in before authorizing. A bug prevents you from entering your account info and proceeding to the client app screen. If you are not logged in you must sign in and then go back to /auth\n You should see a confirmation message in your browser. The server is now sending the code back to Glimesh to request a token. Check the console in your terminal to see the code!\nYou can use the access_token to query the API on the users behalf. This will expire after a few hours so you will need to refresh the token or get a new one. If you have any question talk to us in the #dev channel in our Discord. We would love to hear what you are making!\nThe full file can be found here.\nconst express = require(\u0026#39;express\u0026#39;); //Express package const app = express(); // Creates endpoints for the server. const request = require(\u0026#39;request\u0026#39;); //Request package var clientID = \u0026#34;\u0026#34;; // ID for connecting your users to your app. var secretID = \u0026#34;\u0026#34;; //ID to verify your app, keep private.  const port = process.env.PORT || 3000; //Opens the server on port 3000 app.listen(port, () =\u0026gt; console.log(\u0026#39;App listening on port \u0026#39; + port)); //keeps the server running^  //When a user visits http://localhost:3000/auth app.get(\u0026#39;/auth\u0026#39;, (req, res) =\u0026gt; { //redirects the user to the glimesh authenication page \tres.redirect(301, \u0026#39;https://glimesh.tv/oauth/authorize?response_type=code\u0026amp;state=\u0026amp;client_id=\u0026#39; + clientID + \u0026#39;\u0026amp;scope=public%20email%20chat%20streamkey\u0026amp;redirect_uri=http://localhost:3000/success\u0026#39;); }); app.get(\u0026#34;/success\u0026#34;, (req, res) =\u0026gt; { let code = req.query.code; console.log(\u0026#34;The code is \u0026#34; + code); res.send(`\u0026lt;h1\u0026gt;Code Recieved!\u0026lt;/h1\u0026gt;`) //Sends a confirm message to the user \t//Now we send this code to Glimesh to ask for a token. \tvar options = { method: \u0026#39;POST\u0026#39;, body: \u0026#34;\u0026#34;, url: \u0026#34;https://glimesh.tv/api/oauth/token?grant_type=authorization_code\u0026amp;code=\u0026#34; + code + \u0026#34;\u0026amp;redirect_uri=http://localhost:3000/success\u0026amp;client_id=\u0026#34; + clientID + \u0026#34;\u0026amp;client_secret=\u0026#34; + secretID }; request(options, (error, response, body) =\u0026gt; { //Send glimesh the code for a token in return \tif (!error \u0026amp;\u0026amp; response.statusCode == 200) { //If all is as it should be \tconsole.log(body); //The unfiltered response \tvar data = JSON.parse(body); //The parsed response \tconsole.log(data) // The data we want! \t} else { console.log(error) //log any errors \tconsole.log(response.statusCode) //Status code if an error occurs \tconsole.log(body) //The body for more info \t} }); }); "});index.add({'id':4,'href':'/api-docs/docs/authencation/refreshtoken/refreshtoken/','title':"Refresh Token",'section':"Refresh Token",'content':"Refresh Tokens\r#\r\rA refresh token allows you to get a new access token without having your user authenticate again. It is a standard part of OAuth 2.\n Looking for authentication flow? Start with access tokens\n Refreshing A Token\r#\r\rRefresh tokens are sent when you request an access token. You can pull them from the data that Glimesh sends you.\n{ access_token: \u0026#39;qwertyuiopo1234567890\u0026#39;, created_at: \u0026#39;2020-12-14T15:15:29\u0026#39;, expires_in: 21600, refresh_token: \u0026#39;qwertyuiop0987654321\u0026#39;, scope: \u0026#39;public email chat streamkey\u0026#39;, token_type: \u0026#39;bearer\u0026#39; } You can refresh a token at any time. You do not need to wait for the access token to expire. Refresh tokens last for about one year. When you refresh a token you will need all the info from when you requested an access token.\nSend a POST request to:\nhttps://glimesh.tv/api/oauth/token?grant_type=refresh_token\u0026amp;refresh_token=REFRESH_TOKEN\u0026amp;redirect_uri=REDIRECT_URL\u0026amp;\rclient_id=CLIENT_ID\u0026amp;client_secret=SECRET_ID\u0026amp;code=CODE\rMake sure to replace REFRESH_TOKEN, REDIRECT_URL, CLIENT_ID, SECRET_ID, and CODE with their corresponding values. You must use the same information that was sent when you requested an access token. If you want new scopes you must request a new token.\nProvided you formatted your request correctly Glimesh will send you back a new refresh token and access token.\n{ \u0026#34;access_token\u0026#34;: \u0026#34;qwertyuioip123456789\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2020-12-21T23:08:22\u0026#34;, \u0026#34;expires_in\u0026#34;: 21600, \u0026#34;refresh_token\u0026#34;: \u0026#34;qwertyuiop098765321\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;public email chat streamkey\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;bearer\u0026#34; } This will allow you to use the new token and continue to query the Glimesh API. You must use the new access token and the new refresh token. You can safely discard the old tokens.\nOther Info\r#\r\r You cannot get new scopes from refresh tokens. You must make the user authenticate again with the new scopes. Access tokens last for about 6 hours. You can refresh them earlier if needed. Refresh tokens last for about 1 year. If a user revokes your dev app you cannot use the access or refresh tokens. This would require the user to authenticate again.  If you have any questions talk to us in the #dev channel in our Discord.\n"});index.add({'id':5,'href':'/api-docs/docs/contributing/','title':"Contributing",'section':"Docs",'content':"Contributing\r#\r\rThanks for wanting to help out with the api-docs! We are grateful for your help.\nContributing to the API Docs.\r#\r\rAnyone can contribute to the docs. We only ask that you follow a few guidelines when contributing.\n  Follow the file structure. Each topic (or sub-topic) has language specific folders and a basic guide. Inside each language folder there should be a tutorial and a code file if applicable. You do not need to tackle an entire topic by yourself. Completing even one tutorial is helpful!\n  Follow the tutorial structure. Try to keep each tutorial as objective as possible. You can have some personal expression but try to keep it limited. We want these guides to be as short and as simple as they can get. The tutorial should be written in Markdown. Explain every step and clearly document any code used. Don\u0026rsquo;t do this.\n  Run any code through a prettier software. Try to keep the code looking nice! It doesn\u0026rsquo;t matter which formatter you use but we want the code to be readable.\n  Follow the Glimesh and Github TOS (Terms of Service). Any tutorial that violates either of the TOS will be removed. Any malicious code will be removed.\n  Process\r#\r\rFork the repository. Create an issue if you have any questions. When you have made your changes submit a pull request with a brief overview of your tutorial/topic.\nWe may ask you to make changes. Once accepted your changes will be added to the docs. Thank you for contributing!\n"});index.add({'id':6,'href':'/api-docs/docs/dev-app/','title':"Dev App",'section':"Docs",'content':"Developer Application\r#\r\rAlthough making an application is easy, developers new to OAuth may find some of it confusing. This tutorial will explain the basics of what information is asked for and what is it used for.\n Ready to make your application? Start here\n Name\r#\r\rThe name of your project is a user friendly name for your application. Both Glimesh and your users will see this when they authenticate with your app.\nHomepage\r#\r\rThe homepage of your app is where your product (if applicable) is located. This could be a website for a chatbot, an online tool, or anything that uses the Glimesh API. You do not need to have a public domain to show your product if you don\u0026rsquo;t want to. Using a localhost URL is fine.\nDescription\r#\r\rThe description is a basic explanation of your app. This should be a brief overview of what your app will be used for. Details, details, details!\nImage\r#\r\rThe image you choose here is shown to all users who authenticate with your app. It should be representative of your app and must not violate the Glimesh Terms of Service.\nAllowed Redirect URIs\r#\r\rThe redirect URIs are where Glimesh will redirect users of your app after they authenticate with your app. You specify which one to redirect to in the client request. You should have one URL per line. We prefer HTTPS over HTTP but using a locally hosted HTTP server will be fine.\nA complete dev app will look like this when authenticating.\n"});})();