<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API-Docs</title><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/</link><description>Recent content on API-Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://glimesh.github.io/api-docs/docs/authentication/accesstoken/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/clientcredentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/clientcredentials/</guid><description>Client Credentials (Access Token) # An access token can be used to query the Glimesh API on behalf of a user. Normally you have to get a token from a user. Client credentials allows us to generate an access token for our own account to act as an authenticated user. This is frequently used for testing purposes.
Requesting A Token # Before requesting a token you must have a developer application.</description></item><item><title>PKCE</title><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/pkceauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/pkceauth/</guid><description>PKCE Authentication Flow # PKCE builds upon authorization flow. PKCE is commonly used for mobile and frontend code where your source code (namely client ID) is accessible to your users. PKCE auth does not require a client secret.
Glimesh closely follows the RFC spec which can be found here.
Verifier and Challenge # First we need to generate a code verifier and a code challenge to use in the authorization request.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/accesstoken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/accesstoken/</guid><description>Access Tokens # An access token can be used to query the Glimesh API on behalf of a user. You can also get info about the user that the token belongs to.
This guide is for getting a token from a real user. If you are just testing or don&amp;rsquo;t want to setup authentication yet you can use client credentials
Requesting A Token # Before requesting a token you must have a developer application.</description></item><item><title>NodeJS Access Token</title><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/nodejs/node-access-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/nodejs/node-access-token/</guid><description>Getting User Tokens With NodeJS # This is a basic tutorial for getting an auth token from a user using Oauth with NodeJS. This guide assumes you know basic JS and understand the workings of Oauth 2.
Need a refresh? This tutorial explains the basics of Oauth 2 https://darutk.medium.com/the-simplest-guide-to-oauth-2-0-8c71bd9a15bb
Creating the Project # We need to create a basic project. In your terminal type:
npm init -y
This will create a project.</description></item></channel></rss>